# Installs packages to run edx locally on a single instance
# requires:
#  - group_vars/all
#  - common/tasks/main.yml
#
#  This installs mysql-server-5.5 though
#  in production we use mysql-5.1.62.
#
#  We could install from source instead:
#  http://downloads.mysql.com/archives/mysql-5.1/mysql-5.1.62.tar.gz
#
---

# Install PPA for installing MySQL 5.6 on Ubuntu 12.04LTS
- name: install ppa key
  apt_key:
    id=E5267A6C
    url='{{ COMMON_UBUNTU_APT_KEYSERVER }}0x14AA40EC0831756756D7F66C4F4EA0AAE5267A6C'
    state=present

- name: install apt repository
  apt_repository:
    repo='deb http://ppa.launchpad.net/ondrej/mysql-5.6/ubuntu precise main'
    update_cache=yes
  
- name: look for mysql 5.5
  shell: dpkg -L mysql-server-5.5
  ignore_errors: true
  register: mysql_55_installed

- include: remove_mysql_55.yml
  when: mysql_55_installed.rc != 1

- name: install mysql 56 and dependencies
  apt: pkg={{ item }} install_recommends=yes force=yes state=present
  with_items:
    - software-properties-common
    - mysql-server

- name: configure replication master
  lineinfile: >
    dest='/etc/mysql/my.cnf'
    regexp='{{ item.regexp }}'
    line='{{ item.line }}'
    insertafter='{{ item.insertafter }}'
  with_items:
    - { regexp: '^\[mysqld\]$', line: '[mysqld]', insertafter: 'EOF' }
    - { regexp: '^server-id\b', line: 'server-id = {{ EDXLOCAL_SERVER_ID }}', insertafter: '^\[mysqld\]$' }
    - { regexp: '^bind-address\b', line: 'bind-address = {{ EDXLOCAL_BIND_IP }}', insertafter: '^\[mysqld\]$' }
    - { regexp: '^log-bin\b', line: 'log-bin = master-bin', insertafter: '^\[mysqld\]$' }
    - { regexp: '^log-bin-index\b', line: 'log-bin-index = master-bin.index', insertafter: '^\[mysqld\]$' }
  when: EDXLOCAL_REPL_ROLE == 'master'

- name: configure replication slave
  lineinfile: >
    dest='/etc/mysql/my.cnf'
    regexp='{{ item.regexp }}'
    line='{{ item.line }}'
    insertafter='{{ item.insertafter }}'
  with_items:
    - { regexp: '^\[mysqld\]$', line: '[mysqld]', insertafter: 'EOF' }
    - { regexp: '^server-id\b', line: 'server-id = {{ EDXLOCAL_SERVER_ID }}', insertafter: '^\[mysqld\]$' }
    - { regexp: '^bind-address\b', line: 'bind-address = {{ EDXLOCAL_BIND_IP }}', insertafter: '^\[mysqld\]$' }
    - { regexp: '^relay-log\b', line: 'relay-log = slave-relay-bin', insertafter: '^\[mysqld\]$' }
    - { regexp: '^relay-log-index\b', line: 'relay-log-index = slave-relay-bin.index', insertafter: '^\[mysqld\]$' }
  when: EDXLOCAL_REPL_ROLE == 'slave'

- name: (re)start mysql
  service: name=mysql state=restarted

- name: install packages needed for single server
  apt: pkg={{','.join(edxlocal_debian_pkgs)}} install_recommends=yes state=present

- name: stop replication on slave
  mysql_replication: mode=stopslave
  when: EDXLOCAL_REPL_ROLE == 'slave'

#- name: set master on slave
#  mysql_replication: >
#    mode=changemaster
#    master_host={{ EDXLOCAL_REPL_MASTER_HOST }}
#    master_port={{ EDXLOCAL_REPL_MASTER_PORT }}
#    master_user={{ EDXLOCAL_REPL_USER }}
#    master_password={{ EDXLOCAL_REPL_PASSWORD }}
#  when: EDXLOCAL_REPL_ROLE == 'slave'

# Workaround: The mysql_replication module fails when SSL/TLS is not enabled
- name: set master on slave
  shell: >
    echo "CHANGE MASTER TO
    MASTER_HOST = '{{ EDXLOCAL_REPL_MASTER_HOST }}',
    MASTER_PORT = {{ EDXLOCAL_REPL_MASTER_PORT }},
    MASTER_USER = '{{ EDXLOCAL_REPL_USER }}',
    MASTER_PASSWORD = '{{ EDXLOCAL_REPL_PASSWORD }}';" | mysql
  when: EDXLOCAL_REPL_ROLE == 'slave'

- name: start replication on slave
  mysql_replication: mode=startslave
  when: EDXLOCAL_REPL_ROLE == 'slave'

- name: setup the replication user
  mysql_user: >
    name={{ EDXLOCAL_REPL_USER }}
    password={{ EDXLOCAL_REPL_PASSWORD }}
    priv=*.*:"REPLICATION SLAVE"
    host='{{ EDXLOCAL_USER_HOST }}'
  when: EDXLOCAL_REPL_ROLE == 'master'

- name: setup the edxapp db user
  mysql_user: >
    name={{ EDXAPP_MYSQL_USER }}
    password={{ EDXAPP_MYSQL_PASSWORD }}
    priv='{{ EDXAPP_MYSQL_DB_NAME }}.*:ALL'
    host='{{ EDXLOCAL_USER_HOST }}'
  when: EDXAPP_MYSQL_USER is defined and EDXLOCAL_REPL_ROLE != 'slave'

- name: create a database for edxapp
  mysql_db: >
    db=edxapp
    state=present
    encoding=utf8
  when: EDXAPP_MYSQL_USER is defined and EDXLOCAL_REPL_ROLE != 'slave'

- name: setup the xqueue db user
  mysql_user: >
    name={{ XQUEUE_MYSQL_USER }}
    password={{ XQUEUE_MYSQL_PASSWORD }}
    priv='{{ XQUEUE_MYSQL_DB_NAME }}.*:ALL'
    host='{{ EDXLOCAL_USER_HOST }}'
  when: XQUEUE_MYSQL_USER is defined and EDXLOCAL_REPL_ROLE != 'slave'

- name: create a database for xqueue
  mysql_db: >
    db=xqueue
    state=present
    encoding=utf8
  when: XQUEUE_MYSQL_USER is defined and EDXLOCAL_REPL_ROLE != 'slave'

- name: setup the ora db user
  mysql_user: >
    name={{ ORA_MYSQL_USER }}
    password={{ ORA_MYSQL_PASSWORD }}
    priv='{{ ORA_MYSQL_DB_NAME }}.*:ALL'
    host='{{ EDXLOCAL_USER_HOST }}'
  when: ORA_MYSQL_USER is defined and EDXLOCAL_REPL_ROLE != 'slave'

- name: create a database for ora
  mysql_db: >
    db=ora
    state=present
    encoding=utf8
  when: ORA_MYSQL_USER is defined and EDXLOCAL_REPL_ROLE != 'slave'

- name: create databases for analytics api
  mysql_db: >
    db={{ item }}
    state=present
    encoding=utf8
  when: ANALYTICS_API_SERVICE_CONFIG is defined and EDXLOCAL_REPL_ROLE != 'slave'
  with_items:
    - "{{ ANALYTICS_API_SERVICE_CONFIG['DATABASES']['default']['NAME'] }}"
    - "{{ ANALYTICS_API_SERVICE_CONFIG['DATABASES']['reports']['NAME'] }}"

- name: create database for insights
  mysql_db: >
    db={{ INSIGHTS_DATABASES.default.NAME }}
    state=present
    encoding=utf8
  when: INSIGHTS_DATABASES is defined and EDXLOCAL_REPL_ROLE != 'slave'

- name: create database for ecommerce
  mysql_db: >
    db="{{ ECOMMERCE_DEFAULT_DB_NAME }}"
    state=present
    encoding=utf8
  when: ECOMMERCE_DEFAULT_DB_NAME is defined and EDXLOCAL_REPL_ROLE != 'slave'

- name: setup users for ecommerce
  mysql_user: >
    name="{{ ECOMMERCE_DEFAULT_DB_NAME }}"
    password="{{ ECOMMERCE_DATABASES.default.PASSWORD }}"
    priv='{{ ECOMMERCE_DEFAULT_DB_NAME }}.*:SELECT,INSERT,UPDATE,DELETE'
    host='{{ EDXLOCAL_USER_HOST }}'
  when: ECOMMERCE_DEFAULT_DB_NAME is defined and EDXLOCAL_REPL_ROLE != 'slave'

- name: create api user for the analytics api
  mysql_user: >
    name=api001
    password="{{ ANALYTICS_API_DATABASES.default.PASSWORD }}"
    priv='{{ ANALYTICS_API_DATABASES.default.NAME }}.*:ALL/reports.*:SELECT'
    host='{{ EDXLOCAL_USER_HOST }}'
  when: ANALYTICS_API_SERVICE_CONFIG is defined and EDXLOCAL_REPL_ROLE != 'slave'

- name: create read-only reports user for the analytics-api
  mysql_user: >
    name=reports001
    password="{{ ANALYTICS_API_DATABASES.reports.PASSWORD }}"
    priv='{{ ANALYTICS_API_DATABASES.reports.NAME }}.*:SELECT'
    host='{{ EDXLOCAL_USER_HOST }}'
  when: ANALYTICS_API_SERVICE_CONFIG is defined and EDXLOCAL_REPL_ROLE != 'slave'

- name: setup the edx-notes-api db user
  mysql_user: >
    name={{ EDX_NOTES_API_MYSQL_DB_USER }}
    password={{ EDX_NOTES_API_MYSQL_DB_PASS }}
    priv='{{ EDX_NOTES_API_MYSQL_DB_NAME }}.*:SELECT,INSERT,UPDATE,DELETE'
    host='{{ EDXLOCAL_USER_HOST }}'
  when: EDX_NOTES_API_MYSQL_DB_USER is defined and EDXLOCAL_REPL_ROLE != 'slave'

- name: create a database for edx-notes-api
  mysql_db: >
    db={{ EDX_NOTES_API_MYSQL_DB_NAME }}
    state=present
    encoding=utf8
  when: EDX_NOTES_API_MYSQL_DB_USER is defined and EDXLOCAL_REPL_ROLE != 'slave'

- name: setup the migration db user
  mysql_user: >
    name={{ COMMON_MYSQL_MIGRATE_USER }}
    password={{ COMMON_MYSQL_MIGRATE_PASS }}
    priv='{{ item }}.*:ALL'
    append_privs=yes
    host='{{ EDXLOCAL_USER_HOST }}'
  when: item != 'None' and EDXLOCAL_REPL_ROLE != 'slave'
  with_items:
    - "{{ EDXAPP_MYSQL_DB_NAME|default('None') }}"
    - "{{ XQUEUE_MYSQL_DB_NAME|default('None') }}"
    - "{{ ORA_MYSQL_DB_NAME|default('None') }}"
    - "{{ EDX_NOTES_API_MYSQL_DB_NAME|default('None') }}"
    - "{{ ANALYTICS_API_DEFAULT_DB_NAME|default('None') }}"
    - "{{ ANALYTICS_API_REPORTS_DB_NAME|default('None') }}"
    - "{{ INSIGHTS_DATABASE_NAME|default('None') }}"
    - "{{ ECOMMERCE_DEFAULT_DB_NAME|default('None') }}"

- name: setup the read-only db user
  mysql_user: >
    name={{ COMMON_MYSQL_READ_ONLY_USER }}
    password={{ COMMON_MYSQL_READ_ONLY_PASS }}
    priv='*.*:ALL'
    host='{{ EDXLOCAL_USER_HOST }}'
  when: EDXLOCAL_REPL_ROLE != 'slave'

- name: setup the admin db user
  mysql_user: >
    name={{ COMMON_MYSQL_ADMIN_USER }}
    password={{ COMMON_MYSQL_ADMIN_PASS }}
    priv='*.*:CREATE USER'
    host='{{ EDXLOCAL_USER_HOST }}'
  when: EDXLOCAL_REPL_ROLE != 'slave'


- name: install memcached
  apt: pkg=memcached state=present
